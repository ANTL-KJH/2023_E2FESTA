from bluepy.btle import Scanner, DefaultDelegate
from queue import PriorityQueue
import threading
import time

lock = threading.Lock()
que = PriorityQueue()

class ScanDelegate(DefaultDelegate):
    def __init__(self):
        self.__scan_data__ = {}
        if DefaultDelegate is not None:
            DefaultDelegate.__init__(self)

    def handleDiscovery(self, dev, isNewDev, isNewData):
        raw = dev.getScanData()
        mac = dev.addr.upper()
        rssi = dev.rssi
        data = {}
        data['raw'] = raw
        data['mac'] = mac
        data['rssi'] = rssi
        self.__scan_data__ = data

    def getScanData(self):
        return self.__scan_data__

def scanData(scanner, duration):
    while True:
        devices = scanner.scan(duration)
        print("scan end", end="\n")
        print("=============================")
        for dev in devices:
            for (adtype, desc, value) in dev.getScanData():
                if "aafe" in value:
                    rssi_power = abs(dev.rssi)
                    beaconData = value[8:]
                    print(rssi_power, beaconData)
                    print("scan 1 lock")
                    lock.acquire()
                    que.put((rssi_power, beaconData))
                    print("scan 2 unlock")
                    lock.release()
        time.sleep(1)

def print_scan_data(scanner, duration):
    while True:
        print("print_scan_data_thread")
        lock.acquire()
        print("print 1 lock")
        if que.empty():
            print("print 2 unlock")
            lock.release()
            time.sleep(2)
        else:
            rssi_beacon, data = que.get()
            print("Nearest beacon_rssi:", rssi_beacon, "beacon_data:", data)
            while not que.empty():
                print("size:", que.qsize())
                que.get()
                print("pop")
            print("print 3 unlock")
            lock.release()
            time.sleep(1)

def main():
    duration = 3
    scan_delegate = ScanDelegate()
    scanner = Scanner().withDelegate(scan_delegate)
    scan_thread = threading.Thread(target=scanData, args=(scanner, duration))
    print_thread = threading.Thread(target=print_scan_data, args=(scanner, duration))

    scan_thread.start()
    print_thread.start()

    scan_thread.join()
    print_thread.join()

if __name__ == "__main__":
    main()
